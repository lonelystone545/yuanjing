父类：Throwable
   子类：Exception和Error
	Exception子类：IOException和RuntimeException
	    IOException：EOFException和FileNotFoundException
            RuntimeException：NullPointerException  ArrayIndexOfBoundsException  UnknownTypeException  ClassNotFoundException..
Error：错误，表示不希望被程序捕获或者是程序无法处理的错误。
Exception: 表示程序可以捕捉的异常或者可以处理的异常。Exception分为运行时异常和非运行时异常。
java异常可以分为不受检查异常和检查异常。
Error：由java虚拟机生成并抛出，大多数错误与代码编写者所执行的操作无关。如java虚拟机运行错误，当jvm内存资源不够时，会有内存
	溢出错误。
Exception：分为运行时异常和编译期异常。运行时异常如数组下标越界、空指针异常、算数异常（/0)、找不到类异常等。这些异常是不检查异常，
	程序可以选择捕获处理，也可以不处理。这些异常一般是由程序逻辑错误引起的。
	编译期异常，是必须进行处理的异常，否则程序是无法编译通过的。如IOException、SQLException等。
Error和Exception区别：Error是程序无法控制和处理的，当出现这些错误后，jvm一般会选择终止线程。而Exception通常情况下可以被程序
	处理的，并且在程序中应尽可能的去处理这些异常。
检查异常：除了RuntimeException及其子类外，其他的Exception类及其子类都属于检查异常，当程序中可能出现这些异常时，要么使用try catch捕获
	处理，要么throws子句抛出，否则编译无法通过。
不受检查异常：包括RuntimeException及其子类和Error
	不受检查异常为编译器不要求强制处理的异常，检查异常则是编译器要求必须处理的异常。

抛出异常：需要把问题交给上一级调用来处理这个异常。可以在方法声明上用throws抛出，或者在程序中使用throw抛出。
捕获异常：方法抛出异常后，运行时系统将转为寻找合适的异常处理器。潜在的异常处理器是异常发生时依次存留在调用栈中的方法的
	集合。当异常处理器所能处理的异常类型和方法抛出的异常类型相符时，即为合适的异常的处理器。运行时系统从发生异常的方法
	开始，依次回查调用栈中的方法，直至找到含有合适异常处理器的方法并执行。当运行时系统遍历调用栈而未找到合适的异常处理器，
	则运行终止，同时，意味着java程序的终止。

由于运行时异常及其子类的不可查性，为了更合理、更容易实现应用程序，java规定，运行时异常将由java运行时系统自动抛出，允许
应用程序忽略运行时异常。

java异常处理涉及到五个关键字：try catch finally throws throw
try：将可能抛出异常的代码放在try语句块中，这样当try语句块内发生异常时，异常就会被抛出。（try中发出异常后面的语句不会被执行）
catch：用来捕获try语句块中发生的异常。
finally：finally语句块中的内容总会被执行。主要用于回收try语句块中使用的物理资源（如数据库连接、网络连接和磁盘文件）。只有finally
	执行完成后，才会回来执行try或者catch块中return或者throw语句。如果finally中使用了return或者throw等终止方法的语句，则就不会跳回执行，直接停止。

try{
    //code that might generate exceptions    
}catch(Exception e){
    //the code of handling exception1
}catch(Exception e){
    //the code of handling exception2
}
如果有一个catch语句被匹配到了，则执行该catch块中的异常处理的代码，不会再尝试匹配其他的catch块了。
匹配的原则：是catch子句的异常类或者该异常类的子类
public class TestException {  
    public static void main(String[] args) {  
        int a = 1;  
        int b = 0;  
        try { // try监控区域               
            if (b == 0) throw new ArithmeticException(); // 通过throw语句抛出异常  
            System.out.println("a/b的值是：" + a / b);  
            System.out.println("this will not be printed!");
        }  
        catch (ArithmeticException e) { // catch捕捉异常  
            System.out.println("程序出现异常，变量b不能为0！");  
        }  
        System.out.println("程序正常结束。");  
    }  
}  
结果：
程序出现异常，变量b不能为0！
程序正常结束。
当有多个catch语句时，需要注意顺序问题：先子类后父类（如果父类在前面，那么子类永远不会被匹配，是无效代码）

每个try语句至少有一个catch或者finally子句。

try中有return语句，finally中的代码依然会执行。try中的return语句不会立即返回给调用者，而是记录下返回值，等finally执行完毕后再向调用者返回其值。
如果在finally中修改了返回值，但是在实际返回的时候依然返回的是修改之前的值。但是如果在finally中有return，则最终会执行finally中
的return语句。